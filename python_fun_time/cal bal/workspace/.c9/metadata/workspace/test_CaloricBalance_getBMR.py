{"changed":true,"filter":false,"title":"test_CaloricBalance_getBMR.py","tooltip":"/test_CaloricBalance_getBMR.py","value":"\"\"\"\nDo Not Edit this file. You may and are encouraged to look at it for reference.\n\"\"\"\n\nimport sys\nif sys.version_info.major != 3:\n    print('You must use Python 3.x version to run this unit test')\n    sys.exit(1)\n\nimport unittest\nimport math\n\nimport caloric_balance\n\nfrom test_CaloricBalance_init import TestCaloricBalanceInit\n\n\nclass TestCaloricBalanceGetBMR(unittest.TestCase):\n    def test001_getBMRExists(self):\n        self.assertTrue('getBMR' in dir(caloric_balance.CaloricBalance),\n                        'Function \"getBMR\" is not defined, check your spelling')\n\n    def test002_testGetBMRFemale(self):\n        from caloric_balance import CaloricBalance\n        cb = CaloricBalance('f', 23.0, 65.0, 130.0)\n\n        bmr = cb.getBMR('f', 23.0, 65.0, 130.0)\n        expected = 1417.9\n\n        self.assertAlmostEqual(bmr, expected, 2, 'Your result (%s) is not close enough to (%s)' % (bmr, expected))\n\n    def test003_testGetBMRMale(self):\n        from caloric_balance import CaloricBalance\n        cb = CaloricBalance('m', 26.0, 70.5, 185.0)\n\n        bmr = cb.getBMR('m', 26.0, 70.5, 185.0)\n        expected = 1937.1\n\n        self.assertAlmostEqual(bmr, expected, 2, 'Your result (%s) is not close enough to (%s)' % (bmr, expected))\n\n    def test004_testGetBMRError(self):\n        from caloric_balance import CaloricBalance\n        cb = CaloricBalance('x', 26.0, 70.5, 185.0)\n\n        bmr = cb.getBMR('x', 26.0, 70.5, 185.0)\n        expected = 0.0\n\n        self.assertEqual(bmr, expected, 'Your result (%s) is not equal to (%s)' % (bmr, expected))\n\n    def test005_bmrIsSaved(self):\n        from caloric_balance import CaloricBalance\n        cb = CaloricBalance('f', 23.0, 65.0, 130.0)\n        datamembers = cb.__dict__\n\n        bmrFlag = False\n        for k in datamembers:\n            try:\n                if math.isclose(datamembers[k], -1417.9, abs_tol=0.005):\n                    bmrFlag = True\n            except:\n                #not a real number\n                pass\n        self.assertTrue(bmrFlag, 'The updated caloric balance was not found as a datamember. Did you remember to subtract the BMR?')\n\n    def test006_bmrIsSaved(self):\n        from caloric_balance import CaloricBalance\n        cb = CaloricBalance('m', 26.0, 70.5, 185.0)\n        datamembers = cb.__dict__\n        print(cb.getBMR('m', 26.0, 70.5, 185.0))\n        bmrFlag = False\n        for k in datamembers:\n            try:\n                if math.isclose(datamembers[k], -1937.1, abs_tol=0.005):\n                    bmrFlag = True\n            except:\n                #not a real number\n                pass\n        self.assertTrue(bmrFlag, 'The updated caloric balance was not found as a datamember. Did you remember to subtract the BMR?')\n\n    def test007_bmrIsSaved(self):\n        from caloric_balance import CaloricBalance\n        cb = CaloricBalance('x', 26.0, 70.5, 185.0)\n        datamembers = cb.__dict__\n\n        bmrFlag = False\n        for k in datamembers:\n            if datamembers[k] == 0.0:\n                bmrFlag = True\n        self.assertTrue(bmrFlag,\n                        'The updated caloric balance was not found as a datamember. Did you remember to subtract the BMR?')\n\nif __name__ == '__main__':\n    unittest.main()\n","undoManager":{"mark":-2,"position":21,"stack":[[{"start":{"row":68,"column":0},"end":{"row":68,"column":4},"action":"insert","lines":["    "],"id":2}],[{"start":{"row":68,"column":4},"end":{"row":68,"column":8},"action":"insert","lines":["    "],"id":3}],[{"start":{"row":68,"column":8},"end":{"row":68,"column":9},"action":"insert","lines":["p"],"id":4}],[{"start":{"row":68,"column":9},"end":{"row":68,"column":10},"action":"insert","lines":["r"],"id":5}],[{"start":{"row":68,"column":10},"end":{"row":68,"column":11},"action":"insert","lines":["i"],"id":6}],[{"start":{"row":68,"column":11},"end":{"row":68,"column":12},"action":"insert","lines":["n"],"id":7}],[{"start":{"row":68,"column":12},"end":{"row":68,"column":13},"action":"insert","lines":["t"],"id":8}],[{"start":{"row":68,"column":13},"end":{"row":68,"column":15},"action":"insert","lines":["()"],"id":9}],[{"start":{"row":68,"column":14},"end":{"row":68,"column":15},"action":"insert","lines":["c"],"id":10}],[{"start":{"row":68,"column":15},"end":{"row":68,"column":16},"action":"insert","lines":["b"],"id":11}],[{"start":{"row":68,"column":16},"end":{"row":68,"column":17},"action":"insert","lines":["."],"id":12}],[{"start":{"row":68,"column":17},"end":{"row":68,"column":18},"action":"insert","lines":["g"],"id":13}],[{"start":{"row":68,"column":18},"end":{"row":68,"column":19},"action":"insert","lines":["r"],"id":14}],[{"start":{"row":68,"column":19},"end":{"row":68,"column":20},"action":"insert","lines":["t"],"id":15}],[{"start":{"row":68,"column":20},"end":{"row":68,"column":21},"action":"insert","lines":["B"],"id":16}],[{"start":{"row":68,"column":21},"end":{"row":68,"column":22},"action":"insert","lines":["M"],"id":17}],[{"start":{"row":68,"column":22},"end":{"row":68,"column":23},"action":"insert","lines":["R"],"id":18}],[{"start":{"row":68,"column":23},"end":{"row":68,"column":25},"action":"insert","lines":["()"],"id":19}],[{"start":{"row":68,"column":18},"end":{"row":68,"column":19},"action":"remove","lines":["r"],"id":20}],[{"start":{"row":68,"column":18},"end":{"row":68,"column":19},"action":"insert","lines":["e"],"id":21}],[{"start":{"row":68,"column":17},"end":{"row":68,"column":23},"action":"remove","lines":["getBMR"],"id":22},{"start":{"row":68,"column":17},"end":{"row":68,"column":23},"action":"insert","lines":["getBMR"]}],[{"start":{"row":68,"column":24},"end":{"row":68,"column":46},"action":"insert","lines":["'m', 26.0, 70.5, 185.0"],"id":23}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":71,"column":16},"end":{"row":71,"column":16},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1518487006922}